# challenge='distortion-sqrt-noupspl', generator='gemini-2.5-pro-preview-05-06', temperature=0.01
# --- BEGIN GENERATED CODE ---

import numpy as np
from scipy import signal

def distort(samples, gain_db=12.0, sample_rate=44100.0, channels=2):
    """
    Applies gain increase and f(x)=x/sqrt(1+x^2) non-linearity to an audio signal
    while keeping aliasing to a minimum without oversampling.

    Parameters:
    samples (np.ndarray): Input audio samples, shape (N, channels) or (N,). Float32.
    gain_db (float): Gain to apply in dB.
    sample_rate (float): Sampling rate of the audio.
    channels (int): Number of audio channels (informational, actual channels inferred from samples.shape).

    Returns:
    np.ndarray: Distorted audio samples, with dtype potentially float64 due to filtering,
                or matching input dtype if explicitly cast back.
    """

    # Store original dtype to potentially cast back later.
    original_dtype = samples.dtype
    
    # Work with float64 internally for precision, especially for filtering.
    # If samples are already float64, astype with copy=False avoids a copy.
    # If samples are float32, they are upcast.
    processed_samples = samples.astype(np.float64, copy=False)

    # 1. Apply gain
    gain_lin = 10.0**(gain_db / 20.0)
    processed_samples = processed_samples * gain_lin

    # 2. Apply non-linear distortion f(x) = x / sqrt(1 + x^2)
    # This function is a form of soft clipping.
    # The denominator (sqrt(1 + x^2)) is always >= 1.0, so it's numerically stable.
    distorted_signal_raw = processed_samples / np.sqrt(1.0 + processed_samples**2)

    # 3. Apply anti-aliasing low-pass filter
    # This filter removes high-frequency content generated by the non-linearity
    # that could cause aliasing.
    
    nyquist_freq = sample_rate / 2.0

    # Check if filtering is feasible (sample_rate must be positive)
    if nyquist_freq <= 0:
        # If sample_rate is invalid, filtering is not possible.
        # Return the raw distorted signal.
        # Depending on requirements, an error could be raised here.
        distorted_output = distorted_signal_raw
    else:
        # Define a cutoff frequency for the low-pass filter.
        # A common choice is a fraction of Nyquist (e.g., 0.9 * Nyquist)
        # to allow for the filter's transition band.
        # Wn for signal.butter must be 0 < Wn < 1.
        # Using 0.9 ensures Wn < 1.
        # If nyquist_freq is extremely small, Wn remains 0.9.
        # signal.butter handles various Wn values robustly.
        normalized_cutoff = 0.9 

        # Filter order. A 4th order Butterworth filter provides a good balance
        # between effectiveness (roll-off steepness) and computational cost.
        # `filtfilt` effectively doubles the order for the magnitude response.
        filter_order = 4

        # Design Butterworth low-pass filter coefficients
        b, a = signal.butter(filter_order, normalized_cutoff, btype='low', analog=False)

        # Apply the filter using filtfilt for zero-phase distortion.
        # `filtfilt` processes the signal forwards and then backwards.
        # It correctly handles 1D arrays (mono) and N-D arrays (filtering along `axis`).
        # For (N, num_channels) shaped `samples`, `axis=0` filters each channel independently.
        # For (N,) shaped `samples` (mono), `axis=0` also works as expected.
        distorted_output = signal.filtfilt(b, a, distorted_signal_raw, axis=0)

    # Cast back to original dtype if it was float32 and scipy functions returned float64.
    if original_dtype == np.float32 and distorted_output.dtype == np.float64:
        distorted_output = distorted_output.astype(np.float32)
    
    return distorted_output



# --- END GENERATED CODE ---



import numpy as np

def run_test():
    import json
    import time
    import wave

    import matplotlib.pyplot as plt
    import numpy as np
    import scipy.signal as spsg

    def linear_to_db(linear):
        return 20.0 * np.log10(np.clip(linear, 1e-6, 32.0))

    def db_to_linear(db):
        return 10.0 ** (db / 20.0)

    def delta_cents(freq_1, freq_2):
        return 1200.0 * np.log2(freq_2 / freq_1)

    def find_noise(data, fundamental_freq, sample_rate, prominence=2.0, freq_same_threshold_cents=50.0):
        nyquist = sample_rate / 2
        harmonics = fundamental_freq * np.array(
            list(range(1, int(nyquist / fundamental_freq) + 1))
        )

        fft = np.fft.fft(data)
        freqs = np.fft.fftfreq(len(data), d=1.0 / sample_rate)

        crop = np.argmax(freqs < 0.0)
        freqs = freqs[0:crop]
        fft = fft[0:crop]

        fft = np.abs(fft) / len(data)
        fft_db = linear_to_db(fft)

        peaks = spsg.find_peaks(fft_db, prominence=prominence)
        signal_max = {}
        noise_max = {}

        for peak in peaks[0]:
            peak_freq = freqs[peak]
            closest_harmonic = harmonics[np.argmin(np.abs(harmonics - peak_freq))]
            delta = delta_cents(closest_harmonic, peak_freq)

            if np.abs(delta) > freq_same_threshold_cents:
                closest_noise_freq = None
                closest_distance = 999999.0

                for noise_freq in noise_max.keys():
                    distance = 999999.0 if closest_noise_freq is None else delta_cents(noise_freq, peak_freq)

                    if closest_noise_freq is None or distance < closest_distance:
                        closest_distance = distance
                        closest_noise_freq = noise_freq

                if closest_distance > freq_same_threshold_cents:
                    noise_max[peak_freq] = fft[peak]
                elif fft[peak] > noise_max[closest_noise_freq]:
                    noise_max[closest_noise_freq] += fft[peak]

            else:
                signal_max.setdefault(closest_harmonic, 0.0)

                if fft[peak] > signal_max[closest_harmonic]:
                    signal_max[closest_harmonic] += fft[peak]

        # plot_fft(freqs, fft_db, signal_max, noise_max)

        signal = sum(v for v in signal_max.values())
        noise = sum(v for v in noise_max.values())

        return linear_to_db(signal), linear_to_db(noise)

    def plot_fft(freqs, fft_db, signal_max, noise_max):
        for x, v in signal_max.items():
            v = linear_to_db(v)
            label = f"S {x:7.1f} {v:>6.1f}"
            plt.axvline(
                x=x,
                dashes=(1, 7),
                color="green",
                label=label,
            )
            print(label)

        for x, v in noise_max.items():
            v = linear_to_db(v)
            label = f"N {x:7.1f} {v:>6.1f}"
            plt.axvline(
                x=x,
                dashes=(1, 7),
                color="red",
                label=label,
            )
            print(label)

        plt.plot(freqs, fft_db)
        plt.xlabel("Frequency")
        # plt.legend()
        plt.show()

    def write_wav(filename, buffer, num_channels, sample_width, sample_rate, sample_norm):
        with wave.open(filename, "wb") as wf:
            wf.setnchannels(num_channels)
            wf.setsampwidth(sample_width)
            wf.setframerate(sample_rate)
            wf.writeframes((buffer * sample_norm).astype(np.int16).tobytes())

    sample_rate = 44100
    num_channels = 2
    tone_freq = 3600.0
    length_sec = 30
    num_samples = length_sec * sample_rate
    fade_sec = 0.05
    fade_spl = int(fade_sec * sample_rate) + 1
    amp = 0.99

    silence = np.zeros((num_samples, num_channels))
    t = np.linspace(
        [0.0] * num_channels,
        [length_sec] * num_channels,
        length_sec * sample_rate
    )
    sine = amp * np.sin(2.0 * np.pi * tone_freq * t)
    sine[:fade_spl] *= np.linspace(0.0, 1.0, fade_spl)[:, np.newaxis]
    sine[-fade_spl:] *= np.linspace(1.0, 0.0, fade_spl)[:, np.newaxis]

    buffer = np.vstack([sine, silence]).astype(np.float32)

    begin = time.time()
    distorted = distort(buffer, gain_db=12.0, sample_rate=sample_rate, channels=num_channels)
    end = time.time()

    # write_wav("/tmp/distorted.wav", distorted, num_channels, 2, sample_rate, 32767.0)

    signal, noise = find_noise(distorted[:, 0], tone_freq, sample_rate)
    distorted_abs = np.abs(distorted[:, 0])
    clipping_count = np.sum(distorted_abs > 1.0)
    clipping = distorted_abs - np.clip(distorted_abs, 0.0, 1.0)
    clipping = clipping[clipping > 0.0]
    nans_infs = np.sum(~np.isfinite(distorted[:, 0]))

    extreme = distort(buffer, gain_db=50.0, sample_rate=sample_rate, channels=num_channels)
    nans_infs_extr = np.sum(~np.isfinite(extreme[:, 0]))

    result = {
        "samples": num_samples,
        "signal": float(signal),
        "noise": float(noise),
        "clipping_mean": 0.0 if clipping_count < 1 else float(clipping.mean()),
        "clipping_std": 0.0 if clipping_count < 1 else float(clipping.std()),
        "clipping_count": int(clipping_count),
        "perf": end - begin,
        "nans_infs": int(nans_infs),
        "nans_infs_extr": int(nans_infs_extr),
    }

    print(json.dumps(result, indent=2))


if __name__ == "__main__":
    run_test()

